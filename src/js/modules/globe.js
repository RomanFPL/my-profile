import anime from 'animejs';


const pointArr = [
["212.87,46.18 451,212 168,271 ", "212.87,46.18 51,168 168,271 ", "5.5,386.2 168,271 51,168 ", "374.47,520 168,271 451,212 ", "450.5,6.5 212.87,46.18 451,212 ", "709.87,77.5 450.5,6.5 451,212 ", "750.5,294.5 709.87,77.5 451,212 ", "620.5,477.5 451,212 750.5,294.5 ", "889.71,263.25 750.5,294.5 749.85,568.66 ", "620.5,477.5 749.85,568.66 750.5,294.5 ", "709.87,77.5 889.71,263.25 750.5,294.5 ", "576.5,721.5 749.85,568.66 620.5,477.5 ", "451,212 374.47,520 620.5,477.5 ", "576.5,721.5 374.47,520 620.5,477.5 ", "112,509 374.47,520 168,271 ", "5.5,386.2 168,271 112,509 ", "46.93,618 112,509 5.5,386.2 ", "167.27,738.95 112,509 46.93,618 ", "374.47,520 310.5,671.5 112,509 ", "576.5,721.5 310.5,671.5 374.47,520 ", "379,863 310.5,671.5 167.27,738.95 ", "112,509 310.5,671.5 167.27,738.95 ", "889.71,263.25 903,552 749.85,568.66 ", "839,732 903,552 749.85,568.66 ", "702.87,792.67 839,732 576.5,721.5 ", "749.85,568.66 576.5,721.5 839,732 ", "379,863 576.5,721.5 310.5,671.5 ", "597.19,843.03 576.5,721.5 702.87,792.67 ", "379,863 597.19,843.03 576.5,721.5 "],

["317.87,34.18 474,376 212.5,293.5 ", "317.87,34.18 110,131 212.5,293.5 ", "5.5,404.2 212.5,293.5 110,131 ", "342.97,488.5 212.5,293.5 474,376 ", "581.5,6.5 317.87,34.18 474,376 ", "789.87,93.5 581.5,6.5 474,376 ", "795,317 789.87,93.5 474,376 ", "665,500 474,376 795,317 ", "934.21,285.75 795,317 794.35,591.16 ", "665,500 794.35,591.16 795,317 ", "789.87,93.5 934.21,285.75 795,317 ", "501,641 794.35,591.16 665,500 ", "474,376 342.97,488.5 665,500 ", "501,641 342.97,488.5 665,500 ", "152,449 342.97,488.5 212.5,293.5 ", "5.5,404.2 212.5,293.5 152,449 ", "91.43,640.5 152,449 5.5,404.2 ", "211.77,761.45 152,449 91.43,640.5 ", "342.97,488.5 288,621 152,449 ", "501,641 288,621 342.97,488.5 ", "423.5,885.5 288,621 211.77,761.45 ", "152,449 288,621 211.77,761.45 ", "934.21,285.75 947.5,574.5 794.35,591.16 ", "883.5,754.5 947.5,574.5 794.35,591.16 ", "747.37,815.17 883.5,754.5 501,641 ", "794.35,591.16 501,641 883.5,754.5 ", "423.5,885.5 501,641 288,621 ", "641.69,865.53 501,641 747.37,815.17 ", "423.5,885.5 641.69,865.53 501,641 "],

["382.87,269.18 427.5,339.5 518,321 ", "382.87,269.18 327,414 518,321 ", "355.5,436.2 518,321 327,414 ", "521.97,332.5 518,321 427.5,339.5 ", "427.5,387.5 382.87,269.18 427.5,339.5 ", "558.87,316.5 427.5,387.5 427.5,339.5 ", "599,280 558.87,316.5 427.5,339.5 ", "571,282 427.5,339.5 599,280 ", "489.21,384.75 599,280 498.35,427.16 ", "571,282 498.35,427.16 599,280 ", "558.87,316.5 489.21,384.75 599,280 ", "624,407 498.35,427.16 571,282 ", "427.5,339.5 521.97,332.5 571,282 ", "624,407 521.97,332.5 571,282 ", "440,402 521.97,332.5 518,321 ", "355.5,436.2 518,321 440,402 ", "493.93,549 440,402 355.5,436.2 ", "419.27,511.95 440,402 493.93,549 ", "521.97,332.5 458,484 440,402 ", "624,407 458,484 521.97,332.5 ", "512,598 458,484 419.27,511.95 ", "440,402 458,484 419.27,511.95 ", "489.21,384.75 651.5,410.5 498.35,427.16 ", "526,595 651.5,410.5 498.35,427.16 ", "638.87,519.67 573,513 541,499 ", "498.35,427.16 541,499 573,513 ", "512,598 624,407 458,484 ", "630.19,451.03 624,407 638.87,519.67 ", "512,598 630.19,451.03 624,407 "]
];

const cx = [["213", "451", "451", "168", "112", "167", "6", "47", "710", "750.5", "749.5", "576.5", "310.5", "597", "379", "703", "837", "903", "620.5", "374.5", "51", "890"], 

["318", "582", "474", "212.5", "152", "211.5", "6", "91.5", "790", "795", "794", "501", "288", "641.5", "423.5", "747.5", "881.5", "947.5", "665", "343", "110", "934.5"],

["383", "428", "427.5", "518", "440", "419", "356", "494", "559", "599", "498", "624", "458", "630", "512", "639", "524", "651.5", "571", "522", "327", "489.5"]
];

const cy = [
    ["46", "6", "215", "272", "509", "739", "386", "618", "77", "294.5", "568.5", "721.5", "671.5", "843", "863", "793", "732", "553", "477.5", "520.5", "168", "263"], 
    
    ["34", "6", "379", "294.5", "449", "761.5", "404", "640.5", "93", "317", "591", "641", "621", "865.5", "885.5", "815.5", "754.5", "575.5", "500", "489", "131", "285.5"], 
    
    ["269", "387", "342.5", "322", "402", "512", "436", "549", "316", "280", "427", "407", "484", "451", "598", "520", "595", "411.5", "282", "333", "414", "384.5"]
]

const greetingPhrases = ["Good afternon!", "Hi there!", "It's nice to meet you!", "Uhh...", "I am Roman Franko and..."];

const destructArrPoint = (destArr, index) => {
    const storePoint = [];
    destArr.forEach(x => {
        storePoint.push({value: x[index]});
    })
    return storePoint;
}

document.querySelectorAll(".st0").forEach((polygon,i) => {
    anime({
        targets: `.${polygon.classList[1]}`,
        points: destructArrPoint(pointArr, i),
        easing: "cubicBezier(.5, .05, .1, .3)",
        duration: 8000,
        loop: true,
        direction: "alternate"
    })
});

document.querySelectorAll(".st1").forEach((cyrcle,i) => {
    anime({
        targets: `.${cyrcle.classList[1]}`,
        cx: destructArrPoint(cx,i),
        cy: destructArrPoint(cy,i),
        easing: "cubicBezier(.5, .05, .1, .3)",
        duration: 8000,
        loop: true,
        direction: "alternate"
    })
});


const writeGreatingText = (elem, words) => {
    const target = document.querySelector(elem);
    let i = target.innerHTML.length;
    let curentWord = 0;

    const typeWord = (typeWord) => {
        if(!i){
            const startType = setInterval(() => {
                i++;
                target.innerHTML = typeWord.slice(0,i)+"|";
                if(i>typeWord.length){clearInterval(startType)
                const tempTime = setTimeout(() => {
                    if(curentWord<words.length-1){
                        eraseWord(target.innerHTML);
                        curentWord++;
                    } else {
                        target.innerHTML = target.innerHTML.slice(0,-1);
                        document.getElementById('s-works').scrollIntoView({
                            behavior: 'smooth'
                        });
                    }
                    clearTimeout(tempTime)
                },500);
                }
            }, 100)
        }
    }

    const eraseWord = (eraseWord) => {
            const startErase = setInterval(() => {
                i--;
                target.innerHTML = eraseWord.slice(0,i)+"|";
                if(i<=0){clearInterval(startErase)
                typeWord(words[curentWord])}
            }, 100)
    }

    words.length ? eraseWord(target.innerHTML) : null;

}

writeGreatingText('.greating-part h2', greetingPhrases);
